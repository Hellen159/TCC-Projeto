// SPAA.Data.Tests.Repository/TarefaAlunoRepositoryTests.cs
using Microsoft.EntityFrameworkCore;
using SPAA.Business.Models;
using SPAA.Data.Context;
using SPAA.Data.Repository; // Ensure your repository namespace is correct
using System.Linq; // Required for Count()
using System.Threading.Tasks;
using Xunit;
using System.Collections.Generic; // Required for List

namespace SPAA.Data.Tests.Repository
{
    public class TarefaAlunoRepositoryTests
    {
        // Helper method to create new DbContextOptions for in-memory testing.
        private DbContextOptions<MeuDbContext> CreateNewContextOptions()
        {
            // Creates an in-memory database with a unique name for each test,
            // ensuring tests are isolated.
            return new DbContextOptionsBuilder<MeuDbContext>()
                .UseInMemoryDatabase(databaseName: System.Guid.NewGuid().ToString())
                .Options;
        }

        // --- Tests for the Adicionar method ---

        /// <summary>
        /// Tests if the Adicionar method saves a new student task and returns true.
        /// The primary key (CodigoTarefaAluno, int) should be generated by the database.
        /// </summary>
        [Fact]
        public async Task Adicionar_TarefaAlunoValida_DeveRetornarTrueESalvarNoBanco()
        {
            // Arrange
            var options = CreateNewContextOptions();
            var novaTarefaAluno = new TarefaAluno
            {
                NomeTarefa = "Resolver Exercícios de C#",
                Matricula = "2023001",
                Horario = "10:00"
            };

            bool resultadoDaAcao;

            // Act
            using (var context = new MeuDbContext(options))
            {
                var repository = new TarefaAlunoRepository(context);
                resultadoDaAcao = await repository.Adicionar(novaTarefaAluno);
            }

            // Assert
            Assert.True(resultadoDaAcao); // Verify if the add operation was successful

            using (var context = new MeuDbContext(options))
            {
                // Since CodigoTarefaAluno is auto-generated, we'll find it using the filled ID
                var tarefaAlunoSalva = await context.TarefasAlunos.FindAsync(novaTarefaAluno.CodigoTarefaAluno);

                Assert.NotNull(tarefaAlunoSalva);
                // Verify that the primary key was generated and is not the default value (0)
                Assert.NotEqual(0, tarefaAlunoSalva.CodigoTarefaAluno);
                Assert.Equal(novaTarefaAluno.NomeTarefa, tarefaAlunoSalva.NomeTarefa);
                Assert.Equal(novaTarefaAluno.Matricula, tarefaAlunoSalva.Matricula);
                Assert.Equal(novaTarefaAluno.Horario, tarefaAlunoSalva.Horario);
            }
        }

        // --- Tests for the ObterPorId method ---

        /// <summary>
        /// Tests if the ObterPorId method returns the correct student task for an existing key.
        /// The search is performed by the INT primary key (CodigoTarefaAluno).
        /// </summary>
        [Fact]
        public async Task ObterPorId_ComChaveIntExistente_DeveRetornarTarefaAlunoCorreta()
        {
            // Arrange
            var options = CreateNewContextOptions();
            var tarefaAlunoExistente = new TarefaAluno
            {
                NomeTarefa = "Revisar Conteúdo de POO",
                Matricula = "2023002",
                Horario = "14:30"
            };
            int idGerado;

            using (var context = new MeuDbContext(options))
            {
                context.TarefasAlunos.Add(tarefaAlunoExistente);
                await context.SaveChangesAsync();
                idGerado = tarefaAlunoExistente.CodigoTarefaAluno; // Capture the ID generated by the database
            }

            // Act
            using (var context = new MeuDbContext(options))
            {
                var repository = new TarefaAlunoRepository(context);
                var resultado = await repository.ObterPorId(idGerado);

                // Assert
                Assert.NotNull(resultado);
                Assert.Equal(idGerado, resultado.CodigoTarefaAluno);
                Assert.Equal(tarefaAlunoExistente.NomeTarefa, resultado.NomeTarefa);
                Assert.Equal(tarefaAlunoExistente.Matricula, resultado.Matricula);
            }
        }

        /// <summary>
        /// Tests if the ObterPorId method returns null for a non-existent key.
        /// </summary>
        [Fact]
        public async Task ObterPorId_ComChaveIntInexistente_DeveRetornarNull()
        {
            // Arrange
            var options = CreateNewContextOptions();
            var idInexistente = 999; // An ID that certainly won't be in the empty database

            // Act
            using (var context = new MeuDbContext(options))
            {
                var repository = new TarefaAlunoRepository(context);
                var resultado = await repository.ObterPorId(idInexistente);

                // Assert
                Assert.Null(resultado);
            }
        }

        // --- Tests for the ObterTodos method ---

        /// <summary>
        /// Tests if the ObterTodos method returns all student tasks.
        /// </summary>
        [Fact]
        public async Task ObterTodos_DeveRetornarTodasAsTarefasAlunos()
        {
            // Arrange
            var options = CreateNewContextOptions();
            using (var context = new MeuDbContext(options))
            {
                context.TarefasAlunos.Add(new TarefaAluno { NomeTarefa = "Tarefa A", Matricula = "M001", Horario = "08:00" });
                context.TarefasAlunos.Add(new TarefaAluno { NomeTarefa = "Tarefa B", Matricula = "M002", Horario = "09:00" });
                await context.SaveChangesAsync();
            }

            // Act
            using (var context = new MeuDbContext(options))
            {
                var repository = new TarefaAlunoRepository(context);
                var resultados = await repository.ObterTodos();

                // Assert
                Assert.NotNull(resultados);
                Assert.Equal(2, resultados.Count());
            }
        }

        // --- Tests for the Remover method ---

        /// <summary>
        /// Tests if the Remover method removes an existing student task and returns true.
        /// The removal is performed using the INT primary key (CodigoTarefaAluno).
        /// </summary>
        [Fact]
        public async Task Remover_TarefaAlunoExistente_DeveRetornarTrueERemoverDoBanco()
        {
            // Arrange
            var options = CreateNewContextOptions();
            var tarefaAlunoParaRemover = new TarefaAluno
            {
                NomeTarefa = "Entregar Projeto Final",
                Matricula = "2023003",
                Horario = "17:00"
            };
            int idParaRemover;

            using (var context = new MeuDbContext(options))
            {
                context.TarefasAlunos.Add(tarefaAlunoParaRemover);
                await context.SaveChangesAsync();
                idParaRemover = tarefaAlunoParaRemover.CodigoTarefaAluno; // Get the generated ID
            }

            bool resultadoDaAcao;

            // Act
            using (var context = new MeuDbContext(options))
            {
                var repository = new TarefaAlunoRepository(context);
                resultadoDaAcao = await repository.Remover(idParaRemover);
            }

            // Assert
            Assert.True(resultadoDaAcao); // Verify if the removal action was successful

            using (var context = new MeuDbContext(options))
            {
                // Try to find the student task by its ID to confirm it was removed
                var tarefaAlunoRemovida = await context.TarefasAlunos.FindAsync(idParaRemover);
                Assert.Null(tarefaAlunoRemovida); // Expect it to be null
            }
        }

        /// <summary>
        /// Tests if the Remover method returns false for a non-existent student task.
        /// </summary>
        [Fact]
        public async Task Remover_TarefaAlunoInexistente_DeveRetornarFalse()
        {
            // Arrange
            var options = CreateNewContextOptions();
            var idInexistente = 999;

            // Act
            using (var context = new MeuDbContext(options))
            {
                var repository = new TarefaAlunoRepository(context);
                var resultadoDaAcao = await repository.Remover(idInexistente);

                // Assert
                Assert.False(resultadoDaAcao); // Expect removal to fail
            }
        }

        // --- Tests for the Atualizar method (considering it's void/Task) ---

        /// <summary>
        /// Tests if the Atualizar method modifies an existing student task in the database.
        /// (The method is void, so verification is done by querying the database after the call).
        /// </summary>
        [Fact]
        public async Task Atualizar_TarefaAlunoExistente_DeveAtualizarNoBanco()
        {
            // Arrange
            var options = CreateNewContextOptions();
            var tarefaAlunoOriginal = new TarefaAluno
            {
                NomeTarefa = "Preparar Apresentação",
                Matricula = "2023004",
                Horario = "11:00"
            };
            int idParaAtualizar;

            using (var context = new MeuDbContext(options))
            {
                context.TarefasAlunos.Add(tarefaAlunoOriginal);
                await context.SaveChangesAsync();
                idParaAtualizar = tarefaAlunoOriginal.CodigoTarefaAluno;
            }

            // Modify the student task
            tarefaAlunoOriginal.NomeTarefa = "Preparar Apresentação (Atualizada)";
            tarefaAlunoOriginal.Horario = "15:00";

            // Act
            using (var context = new MeuDbContext(options))
            {
                var repository = new TarefaAlunoRepository(context);
                await repository.Atualizar(tarefaAlunoOriginal); // Call the void Atualizar method
            }

            // Assert
            // Query the database to verify the update
            using (var context = new MeuDbContext(options))
            {
                var tarefaAlunoAtualizada = await context.TarefasAlunos.FindAsync(idParaAtualizar);
                Assert.NotNull(tarefaAlunoAtualizada);
                Assert.Equal("Preparar Apresentação (Atualizada)", tarefaAlunoAtualizada.NomeTarefa);
                Assert.Equal("15:00", tarefaAlunoAtualizada.Horario);
            }
        }

        // --- NEW TESTS FOR TarefaAlunoRepository specific methods ---

        /// <summary>
        /// Tests if IdTarefa returns the correct CodeTarefaAluno for an existing matricula and horario.
        /// </summary>
        [Fact]
        public async Task IdTarefa_ComMatriculaEHorarioExistentes_DeveRetornarCodigoTarefaAlunoCorreto()
        {
            // Arrange
            var options = CreateNewContextOptions();
            var matricula = "M005";
            var horario = "13:00";
            var tarefa = new TarefaAluno
            {
                NomeTarefa = "Estudar para a prova",
                Matricula = matricula,
                Horario = horario
            };
            int expectedId;

            using (var context = new MeuDbContext(options))
            {
                context.TarefasAlunos.Add(tarefa);
                await context.SaveChangesAsync();
                expectedId = tarefa.CodigoTarefaAluno;
            }

            // Act
            using (var context = new MeuDbContext(options))
            {
                var repository = new TarefaAlunoRepository(context);
                var resultId = await repository.IdTarefa(horario, matricula);

                // Assert
                Assert.NotNull(resultId);
                Assert.Equal(expectedId, resultId.Value);
            }
        }

        /// <summary>
        /// Tests if IdTarefa returns null when no matching matricula and horario are found.
        /// </summary>
        [Fact]
        public async Task IdTarefa_ComMatriculaEHorarioInexistentes_DeveRetornarNull()
        {
            // Arrange
            var options = CreateNewContextOptions();
            var matricula = "M999";
            var horario = "23:00";

            // Act
            using (var context = new MeuDbContext(options))
            {
                var repository = new TarefaAlunoRepository(context);
                var resultId = await repository.IdTarefa(horario, matricula);

                // Assert
                Assert.Null(resultId);
            }
        }

        /// <summary>
        /// Tests if TodasTarefasDoAluno returns a list of all tasks for a given matricula.
        /// </summary>
        [Fact]
        public async Task TodasTarefasDoAluno_ComMatriculaExistente_DeveRetornarTodasAsTarefasDoAluno()
        {
            // Arrange
            var options = CreateNewContextOptions();
            var matricula = "M006";
            using (var context = new MeuDbContext(options))
            {
                context.TarefasAlunos.Add(new TarefaAluno { NomeTarefa = "Tarefa 1", Matricula = matricula, Horario = "08:00" });
                context.TarefasAlunos.Add(new TarefaAluno { NomeTarefa = "Tarefa 2", Matricula = matricula, Horario = "10:00" });
                context.TarefasAlunos.Add(new TarefaAluno { NomeTarefa = "Tarefa De Outro Aluno", Matricula = "M007", Horario = "11:00" });
                await context.SaveChangesAsync();
            }

            // Act
            using (var context = new MeuDbContext(options))
            {
                var repository = new TarefaAlunoRepository(context);
                var tarefasDoAluno = await repository.TodasTarefasDoAluno(matricula);

                // Assert
                Assert.NotNull(tarefasDoAluno);
                Assert.Equal(2, tarefasDoAluno.Count);
                Assert.True(tarefasDoAluno.All(t => t.Matricula == matricula));
            }
        }

        /// <summary>
        /// Tests if TodasTarefasDoAluno returns an empty list if no tasks are found for the given matricula.
        /// </summary>
        [Fact]
        public async Task TodasTarefasDoAluno_ComMatriculaInexistente_DeveRetornarListaVazia()
        {
            // Arrange
            var options = CreateNewContextOptions();
            var matricula = "M999"; // Matricula que não existe no banco de dados

            // Act
            using (var context = new MeuDbContext(options))
            {
                var repository = new TarefaAlunoRepository(context);
                var tarefasDoAluno = await repository.TodasTarefasDoAluno(matricula);

                // Assert
                Assert.NotNull(tarefasDoAluno);
                Assert.Empty(tarefasDoAluno);
            }
        }

        /// <summary>
        /// Tests if TodasTarefasDoAluno returns an empty list when the database is empty.
        /// </summary>
        [Fact]
        public async Task TodasTarefasDoAluno_BancoDeDadosVazio_DeveRetornarListaVazia()
        {
            // Arrange
            var options = CreateNewContextOptions();
            var matricula = "M001"; // Qualquer matrícula, já que o banco estará vazio

            // Act
            using (var context = new MeuDbContext(options))
            {
                var repository = new TarefaAlunoRepository(context);
                var tarefasDoAluno = await repository.TodasTarefasDoAluno(matricula);

                // Assert
                Assert.NotNull(tarefasDoAluno);
                Assert.Empty(tarefasDoAluno);
            }
        }
    }
}