@using SPAA.App.ViewModels
@model List<SPAA.App.ViewModels.DisciplinaListaViewModel>

@section Styles {
    <link rel="stylesheet" href="~/css/Components/logo.css" />
    <link rel="stylesheet" href="~/css/Components/grade.css" />
}

@{
    ViewData["Title"] = "SPAA";
    var disciplinasAprovadas = ViewData["Aprovadas"] as DisciplinaListaViewModel;
}

<div class="toplogo">
        <div class="logoSpaa">
            <img src="~/assets/unbflag.svg" alt="Imagem da Logo da UnB" />
        </div>
        <div>
            <h1 class="logo">SPAA</h1>
            <h2 class="subtitle">Universidade de Brasília</h2>
        </div>
</div>

<div class="grade-container">

    <!-- Cabeçalho com título e botão de ações -->
    <div class="header-grade">
        <h2>Grade 2025.1</h2>
        <button class="btn-acoes"></button>
    </div>

    <!-- Tabela -->
    <div class="tabela-grade">
        @{
            string[,] grade = new string[6, 12];

            var turmasSalvas = ViewData["TurmasSalvas"] as List<TurmaViewModel> ?? new();

            foreach (var turma in turmasSalvas)
            {
                foreach (var bloco in turma.Horario.Split(','))
                {
                    var part = bloco.Trim().ToUpper();
                    var match = System.Text.RegularExpressions.Regex.Match(part, @"^(\d+)([MTN])(\d+)$");

                    if (!match.Success)
                        continue;

                    var dias = match.Groups[1].Value.ToCharArray();
                    var turno = match.Groups[2].Value[0];
                    var blocos = match.Groups[3].Value.ToCharArray();

                    foreach (var dia in dias)
                    {
                        foreach (var blocoNum in blocos)
                        {
                            if (int.TryParse(dia.ToString(), out int diaInt) &&
                            int.TryParse(blocoNum.ToString(), out int blocoInt))
                            {
                                int horaIndex = turno switch
                                {
                                    'M' => blocoInt - 1,
                                    'T' => blocoInt + 4,
                                    'N' => blocoInt + 10,
                                    _ => -1
                                };

                                int diaSemana = diaInt - 2; // Segunda é 2 no seu formato

                                if (diaSemana >= 0 && diaSemana < 6 && horaIndex >= 0 && horaIndex < 12)
                                {
                                    grade[diaSemana, horaIndex] = turma.CodigoDisciplina;
                                }
                            }
                        }
                    }
                }
            }

            string[] horas = { "08:00", "09:00", "10:00", "11:00", "12:00", "13:00", "14:00", "15:00", "16:00", "17:00", "18:00", "19:00" };
        }

        <table>
            <thead>
                <tr>
                    <th>Horários</th>
                    <th>Seg</th>
                    <th>Ter</th>
                    <th>Qua</th>
                    <th>Qui</th>
                    <th>Sex</th>
                    <th>Sáb</th>
                </tr>
            </thead>
            <tbody>
                @for (int h = 0; h < horas.Length; h++)
                {
                    <tr>
                        <td class="horario">@horas[h]</td>
                        @for (int d = 0; d < 6; d++) // seg a sáb
                        {
                            <td>
                                @if (!string.IsNullOrWhiteSpace(grade[d, h]))
                                {
                                    @grade[d, h]
                                }
                                else
                                {
                                    <text>---</text>
                                }
                            </td>
                        }
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <!-- Botões Inferiores -->
    <div class="botoes-inferiores">
        <a asp-controller="Grid" asp-action="MontarGrade" class="btn-montar">
            <img src="~/assets/plus.svg" alt="Ícone de Mais" style="margin-right: 0.5rem;" />
            Montar sua grade
        </a>
        <a class="btn-editar"><img src="~/assets/editDashboard.svg" alt="Ícone de editar" style="margin-right: 0.5rem;" /> Editar grade</a>
    </div>

</div>


<div style=" display: flex; margin-left: 1.5rem;">
<!-- Exibe disciplinas aprovadas -->
@if (ViewData["Aprovadas"] is DisciplinaListaViewModel aprovadas)
{
    @await Html.PartialAsync("_ListaDisciplinas", aprovadas)
}

@if (ViewData["Pendentes"] is DisciplinaListaViewModel pendentes)
{
    @await Html.PartialAsync("_ListaDisciplinas", pendentes)
}

@if (TempData["MensagemSucesso"] != null)
{
    <div class="alert alert-success">
        @TempData["MensagemSucesso"]
    </div>
}
@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger">
        @TempData["ErrorMessage"]
    </div>
}
</div>