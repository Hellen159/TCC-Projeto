@model SPAA.Business.Models.Aluno

@{
    var configuracaoViewModel = new SPAA.App.ViewModels.ConfigurationViewModel();
    double porcentagem = ViewData["PorcentagemCurso"] as double? ?? 0.0;
    porcentagem = Math.Max(0, Math.Min(100, porcentagem));

    double radius = 45;
    double circumference = 2 * Math.PI * radius;
    double dashOffset = circumference * (1 - porcentagem / 100);

    var circumferenceString = circumference.ToString(System.Globalization.CultureInfo.InvariantCulture);
    var dashOffsetString = dashOffset.ToString(System.Globalization.CultureInfo.InvariantCulture);

    // --- NOVO: Acessa as notificações do ViewBag ---
    // Faz um cast para List<dynamic> ou para o tipo exato da sua Notificacao (Ex: List<SPAA.Business.Models.Notificacao>)
    var notificacoes = ViewBag.Notificacoes as IEnumerable<SPAA.Business.Models.Notificacao>;
}

@section Styles {
    <link rel="stylesheet" href="~/css/Components/config.css" />
    <link rel="stylesheet" href="~/css/Shared/auth.css" />
    <link rel="stylesheet" href="~/css/site.css" />
}


@await Html.PartialAsync("_ConfiguracoesModal", configuracaoViewModel)

<button id="menu-toggle" class="hamburger-btn">☰</button>
<aside id="sidebar" class="sidebar">
    <div class="user-dropdown">
        <button class="user-button">
            @Model.NomeAluno
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="caret-down-icon" viewBox="0 0 16 16">
                <path d="M3.5 14.5L8 9.5l4.5 5z" />
            </svg>
        </button>

        <div class="dropdown-menu">
            <ul>
                <li><a href="#" id="abrir-config" style="padding-right: 0px;">Configurações</a></li>
                <li><a href="#" data-bs-toggle="modal" data-bs-target="#aboutModal" data-bs-padding-right="0">Sobre Nós</a></li>
                <li>
                    <form asp-controller="Account" asp-action="Logout" method="post">
                        <button type="submit" style="background: none; border: none; text-align: right; width: 100%; color: white;">
                            Sair
                        </button>
                    </form>
                </li>
            </ul>
        </div>

    </div>
    <section class="progress-section">
        <div class="progress-circle">
            <svg viewBox="0 0 100 100" width="100" height="100">
                <circle class="progress-track"
                        cx="50" cy="50" r="@radius"
                        fill="none"
                        stroke="#fff"
                        stroke-width="5.8"
                        stroke-dasharray="@circumferenceString"
                        stroke-dashoffset="0" />

                <circle class="progress-bar"
                        cx="50" cy="50" r="@radius"
                        fill="none"
                        stroke="rgba(74, 144, 226)"
                        stroke-width="6"
                        stroke-dasharray="@circumferenceString"
                        stroke-dashoffset="@dashOffsetString" />

                <circle class="progress-center"
                        cx="50" cy="50" r="33 "
                        fill="rgba(74, 144, 226, 0.4)" />
                <defs>
                    <filter id="shadow">
                        <feDropShadow stdDeviation="3"
                                      dx="0" dy="0"
                                      flood-color="rgba(0,0,0,0.3)" />
                    </filter>
                </defs>
            </svg>
        </div>
        <div class="momento">
            <h3>PROGRESSO</h3>
            <h3>ACADÊMICO</h3>
            <p>@porcentagem.ToString("F0")%</p>
        </div>
        @* <button class="view-flowchart-button"> <img src="~/assets/clock.svg" alt="Ícone de Relógio" style="margin-right: 0.5rem;" />Visualizar Fluxograma</button> *@
    </section>
    <section class="notifications-section">
        <h3>Notificações</h3>
        @if (notificacoes != null && notificacoes.Any()) // Verifica se há notificações para exibir
        {
            @foreach (var notificacao in notificacoes)
            {
                <div class="notification-card">
                    <p>@notificacao.Mensagem</p> @* Exibe a mensagem da notificação *@
                </div>
            }
        }
        else
        {
            <div class="notification-card">
                <p>Nenhuma notificação ativa no momento.</p>
            </div>
        }
    </section>
    <section class="hours-remaining-section">
        <h3>Horas faltantes:</h3>
        <p>Obrigatória: @Model.HorasObrigatoriasPendentes horas</p>
        <p style="margin-bottom: 0;">Optativa: @Model.HorasOptativasPendentes horas</p>
    </section>
</aside>

<div id="overlay" class="overlay-hidden"></div>

<div id="modalContainer"></div>

<script>
    document.querySelector('.user-button').addEventListener('click', function () {
        const dropdown = document.querySelector('.dropdown-menu');
        const button = this;

        // Toggle exibição do dropdown
        const isVisible = dropdown.style.display === 'flex';
        dropdown.style.display = isVisible ? 'none' : 'flex';

        // Adiciona/remove a classe active no botão
        button.classList.toggle('active', !isVisible);
    });

    // Fecha o dropdown ao clicar fora e remove a classe active
    window.addEventListener('click', function (event) {
        const dropdown = document.querySelector('.dropdown-menu');
        const button = document.querySelector('.user-button');

        if (!event.target.closest('.user-dropdown')) {
            dropdown.style.display = 'none';
            button.classList.remove('active');
        }
    });

    function openAboutModal() {
        var aboutModal = new bootstrap.Modal(document.getElementById('aboutModal'));
        aboutModal.show();
    }

        document.getElementById("abrir-config").addEventListener("click", function (e) {
        e.preventDefault()
        var configModal = new bootstrap.Modal(document.getElementById('configuracoesModal'))
        configModal.show()

        // Adicione um listener para o evento "hidden.bs.modal" na modal de configurações
        document.getElementById('configuracoesModal').addEventListener('hidden.bs.modal', function () {
            console.log('Modal de configurações foi fechado.')
        })
    })

        // No botão de excluir conta
    document.querySelector('#configuracoesModal button[style*="background-color: red;"]').addEventListener('click', function (e) {
        e.preventDefault()

        // Feche a modal de configurações antes de abrir a modal de exclusão
        var configModal = bootstrap.Modal.getInstance(document.getElementById('configuracoesModal'))
        if (configModal) {
            configModal.hide()
        }

        // Abra a modal de exclusão
        var deleteModal = new bootstrap.Modal(document.getElementById('confirmarExclusaoModal'))
        deleteModal.show()
    })

            document.addEventListener("DOMContentLoaded", function () {
        const menuToggle = document.getElementById('menu-toggle');
        const sidebar = document.getElementById('sidebar');
        const overlay = document.getElementById('overlay');


        if (!menuToggle) {
            console.warn("Botão 'menu-toggle' não encontrado.");
            return;
        }

        menuToggle.addEventListener('click', function () {
            if (sidebar) sidebar.classList.toggle('active');
            if (overlay) overlay.classList.toggle('overlay-active');
        });

        if (overlay) {
            overlay.addEventListener('click', function () {
                if (sidebar) sidebar.classList.remove('active');
                overlay.classList.remove('overlay-active');
            });
        }
    });

        document.getElementById('menu-toggle').addEventListener('click', function () {
        const btn = this;
        btn.classList.add('hide');
        setTimeout(() => btn.classList.remove('hide'), 120);
    });
</script>