// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SPAA.Data.Context;

#nullable disable

namespace SPAA.Data.Migrations
{
    [DbContext(typeof(MeuDbContext))]
    partial class MeuDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SPAA.Business.Models.Aluno", b =>
                {
                    b.Property<string>("Matricula")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("matricula");

                    b.Property<string>("CodigoUser")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("user_id");

                    b.Property<sbyte>("HistoricoAnexado")
                        .HasColumnType("TINYINT(0)")
                        .HasColumnName("historico_anexado");

                    b.Property<string>("NomeAluno")
                        .IsRequired()
                        .HasColumnType("varchar(150)")
                        .HasColumnName("nome");

                    b.Property<string>("SemestreEntrada")
                        .IsRequired()
                        .HasColumnType("varchar(7)")
                        .HasColumnName("semestre_entrada");

                    b.HasKey("Matricula");

                    b.HasIndex("CodigoUser")
                        .IsUnique();

                    b.ToTable("alunos", (string)null);
                });

            modelBuilder.Entity("SPAA.Business.Models.AlunoDisciplina", b =>
                {
                    b.Property<string>("Matricula")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("matricula");

                    b.Property<string>("CodigoDisciplina")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("codigo_disciplina");

                    b.Property<string>("Semestre")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("semestre");

                    b.Property<string>("Situacao")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("situacao");

                    b.HasKey("Matricula", "CodigoDisciplina", "Semestre");

                    b.ToTable("alunos_disciplinas", (string)null);
                });

            modelBuilder.Entity("SPAA.Business.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("SPAA.Business.Models.Curso", b =>
                {
                    b.Property<int>("CodigoCurso")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("cd_curso");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("CodigoCurso"));

                    b.Property<int>("CargaHorariaObrigatoria")
                        .HasColumnType("int")
                        .HasColumnName("carga_horaria_obrigatoria");

                    b.Property<int>("CargaHorariaOptativa")
                        .HasColumnType("int")
                        .HasColumnName("carga_horaria_optativa");

                    b.Property<string>("NomeCurso")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("nome");

                    b.HasKey("CodigoCurso");

                    b.ToTable("cursos", (string)null);

                    b.HasData(
                        new
                        {
                            CodigoCurso = 1,
                            CargaHorariaObrigatoria = 0,
                            CargaHorariaOptativa = 0,
                            NomeCurso = "comum"
                        },
                        new
                        {
                            CodigoCurso = 2,
                            CargaHorariaObrigatoria = 0,
                            CargaHorariaOptativa = 0,
                            NomeCurso = "software"
                        });
                });

            modelBuilder.Entity("SPAA.Business.Models.Disciplina", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CargaHoraria")
                        .HasColumnType("int")
                        .HasColumnName("carga_horaria");

                    b.Property<int>("CodigoCurso")
                        .HasColumnType("int")
                        .HasColumnName("cd_curso");

                    b.Property<string>("CodigoDisciplina")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("cd_disciplina");

                    b.Property<int>("CodigoTipoDisciplina")
                        .HasColumnType("int")
                        .HasColumnName("cd_tipo_disciplina");

                    b.Property<string>("Curriculo")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("curriculo");

                    b.Property<string>("NomeDisciplina")
                        .IsRequired()
                        .HasColumnType("varchar(150)")
                        .HasColumnName("nome");

                    b.HasKey("Id");

                    b.ToTable("disciplinas", (string)null);
                });

            modelBuilder.Entity("SPAA.Business.Models.TipoDisciplina", b =>
                {
                    b.Property<int>("CodigoTipoDisiciplina")
                        .HasColumnType("int")
                        .HasColumnName("cd_tipo_disciplina");

                    b.Property<string>("NomeTipoDisciplina")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("nome");

                    b.HasKey("CodigoTipoDisiciplina");

                    b.ToTable("tipos_disciplinas", (string)null);

                    b.HasData(
                        new
                        {
                            CodigoTipoDisiciplina = 1,
                            NomeTipoDisciplina = "Obrigatoria"
                        },
                        new
                        {
                            CodigoTipoDisiciplina = 2,
                            NomeTipoDisciplina = "Optativa"
                        },
                        new
                        {
                            CodigoTipoDisiciplina = 3,
                            NomeTipoDisciplina = "ModuloLivre"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SPAA.Business.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SPAA.Business.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SPAA.Business.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SPAA.Business.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SPAA.Business.Models.Aluno", b =>
                {
                    b.HasOne("SPAA.Business.Models.ApplicationUser", "User")
                        .WithOne("Aluno")
                        .HasForeignKey("SPAA.Business.Models.Aluno", "CodigoUser")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SPAA.Business.Models.ApplicationUser", b =>
                {
                    b.Navigation("Aluno")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
